-- programs ------------------------------------------------

entrypoints Program ;

Prog.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

ClassField. ClassAttr ::= Type Ident ";" ;

separator ClassAttr "" ;

ClassDef.  TopDef ::= "class" Ident "{" [ClassAttr]   "}" ;

separator nonempty TopDef "" ;

Ar. 	   Arg ::= Type Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Blk.       Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Expr6 "=" Expr  ";" ;

Incr.      Stmt ::= Expr6 "++"  ";" ;

Decr.      Stmt ::= Expr6 "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

ForEach.   Stmt ::= "for" "(" Type Ident ":" Ident ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

SPrintInt. Stmt ::= "printInt" "(" Expr ")" ";" ;

SPrintStr. Stmt ::= "printString" "(" Expr ")" ";" ;

Error.     Stmt ::= "error" "(" ")" ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

ArrT.      Type ::= Type "[]";

ClassT.    Type ::= Ident ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ENull.     Expr6 ::= "null" ;

EVarArr.   Expr6 ::= Expr6 "[" Expr "]" ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

EArr.      Expr6 ::= "new" Type "[" Expr "]" ;

EArrClass. Expr6 ::= "new" Ident "[" Expr "]" ;

EClass.    Expr6 ::= "new" Ident;

EAttr.     Expr6 ::= Expr6 "." Ident  ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

SReadInt.  Expr ::= "readInt" "(" ")" ; 

SReadStr.  Expr ::= "readString" "(" ")" ; 

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

